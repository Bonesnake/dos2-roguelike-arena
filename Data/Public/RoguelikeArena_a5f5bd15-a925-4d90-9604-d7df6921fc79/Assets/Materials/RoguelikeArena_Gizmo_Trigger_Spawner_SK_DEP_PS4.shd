[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float3 WorldNormal : TEXCOORD0;
	float3 WorldBinormal : TEXCOORD1;
	float3 WorldTangent : TEXCOORD2;
	float3 WorldView : TEXCOORD3;
};

@uniform row_major float4x4 WorldMatrix;
VertexOutput main(uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_View);
	@uniform(global_ViewProjection);
	@uniform(global_ViewPos);
	@uniform(WorldMatrix);

	VertexOutput Out;

	row_major float3x4 boneMatrix1 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).x);
	row_major float3x4 boneMatrix2 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).y);
	row_major float3x4 boneMatrix3 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).z);
	row_major float3x4 boneMatrix4 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).w);
	//World space position
	float4 worldPosition = float4(0.0f, 0.0f, 0.0f, 1.0f);
	float4 tempPosSkinned = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, tempPosSkinned)));
	worldPosition = mul(WorldMatrix, worldPosition);

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	//Compute local tangent frame
	row_major float3x3 LocalTangentFrame = GetTangentFrame(SRT_VS_BUFFER_QTANGENT(id));

	float3 LocalNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	float3 localNormalNormalized = normalize(LocalNormal);

	//World space Normal
	float3 worldNormal = float3(0.0f, 0.0f, 0.0f);
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localNormalNormalized, 0.0f))));
	worldNormal = mul(WorldMatrix, float4(worldNormal, 0.0f)).xyz;

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	Out.WorldNormal = worldNormalNormalized;

	float3 LocalBinormal = LocalTangentFrame[1];

	//Normalize Local Binormal
	float3 localBinormalNormalized = normalize(LocalBinormal);

	//World space Binormal
	float3 worldBinormal = float3(0.0f, 0.0f, 0.0f);
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = mul(WorldMatrix, float4(worldBinormal, 0.0f)).xyz;

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(worldBinormal);

	Out.WorldBinormal = worldBinormalNormalized;

	float3 LocalTangent = LocalTangentFrame[0];

	//Normalize Local Tangent
	float3 localTangentNormalized = normalize(LocalTangent);

	//World space Tangent
	float3 worldTangent = float3(0.0f, 0.0f, 0.0f);
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localTangentNormalized, 0.0f))));
	worldTangent = mul(WorldMatrix, float4(worldTangent, 0.0f)).xyz;

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(worldTangent);

	Out.WorldTangent = worldTangentNormalized;

	//World space view vector
	float3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	Out.WorldView = worldView;


	return Out;
}


[Fragment shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float3 WorldNormal : TEXCOORD0;
	float3 WorldBinormal : TEXCOORD1;
	float3 WorldTangent : TEXCOORD2;
	float3 WorldView : TEXCOORD3;
};

struct PixelOutput
{
};

@uniform float4 Vector4Parameter_Color;
void CalculateMatOpacity(SrtPsData srtData : S_SRT_DATA,
	float3 in_0,
	out float out_0)
{
	// Retrieve SRT data:
	@uniform(Vector4Parameter_Color);

	float Local0 = pow((1.0f - saturate(dot(float3(0.0f, 1.0f, 0.0f), in_0))), 1.0f);
	float4 Local1 = (Vector4Parameter_Color * Local0);
	float4 Local2 = (Local1 + 0.5f);
	out_0 = Local2.x;
}

PixelOutput main(PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	PixelOutput Out;

	float matOpacity;
	//Normalize World Normal
	float3 worldNormalNormalized = normalize(In.WorldNormal);

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(In.WorldBinormal);

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(In.WorldTangent);

	row_major float3x3 NBT = row_major float3x3(worldTangentNormalized, worldNormalNormalized, worldBinormalNormalized);

	//Normalized world space view vector
	float3 worldViewNormalized = normalize(In.WorldView);

	//Calculate tangent space view vector
	float3 tangentView = mul(NBT, worldViewNormalized);

	CalculateMatOpacity(srtData, tangentView, matOpacity);
	clip((matOpacity - 0.5f));


	return Out;
}
