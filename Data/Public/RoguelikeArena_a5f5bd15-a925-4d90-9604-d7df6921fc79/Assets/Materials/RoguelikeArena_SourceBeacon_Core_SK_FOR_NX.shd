[Vertex shader]

#version 450
#extension GL_NV_gpu_shader5 : enable
#include "Shaders/NX/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_NX.shdh"

layout(location = 15) in uvec4 inBlendIndices0;
layout(location = 14) in vec4 inBlendWeight0;
layout(location = 0) in vec3 inPosition0;
layout(location = 1) in vec4 inNormal0;
layout(location = 4) in vec2 inTexCoord0;

layout(location = 0) out gl_PerVertex
{
	vec4 gl_Position;
};
layout(location = 1) out vec4 Position0;
layout(location = 2) out vec4 TexCoord0;
layout(location = 3) out vec3 TexCoord1;
layout(location = 4) out vec3 TexCoord2;
layout(location = 5) out vec2 TexCoord3;
layout(location = 6) out vec3 WorldBinormal;
layout(location = 7) out vec3 WorldTangent;
layout(location = 8) out vec3 WorldView;
layout(location = 9) out float HeightFog;
layout(location = 10) out float DistanceFog;
layout(location = 11) out vec3 LocalNormal;
layout(location = 12) out float DepthNormalized;

layout(binding = 0, std140) uniform PGlobals
{
	mat3x4 BoneMatrices[128];
	layout(row_major) mat4x4 WorldMatrix;
};

void main()
{
	mat3x4 boneMatrix1 = BoneMatrices[inBlendIndices0.x];
	mat3x4 boneMatrix2 = BoneMatrices[inBlendIndices0.y];
	mat3x4 boneMatrix3 = BoneMatrices[inBlendIndices0.z];
	mat3x4 boneMatrix4 = BoneMatrices[inBlendIndices0.w];
	//World space position
	vec4 worldPosition = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.x * (vec4(inPosition0, 1.0f) * boneMatrix1)));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.y * (vec4(inPosition0, 1.0f) * boneMatrix2)));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.z * (vec4(inPosition0, 1.0f) * boneMatrix3)));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.w * (vec4(inPosition0, 1.0f) * boneMatrix4)));
	worldPosition = (WorldMatrix * worldPosition);

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//Pass world position to pixel shader
	TexCoord0 = worldPosition;

	//Compute local tangent frame
	mat3x3 LocalTangentFrame = GetTangentFrame(inNormal0);

	vec3 localNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(localNormal);

	//World space Normal
	vec3 worldNormal = vec3(0.0f, 0.0f, 0.0f);
	worldNormal = (worldNormal + (inBlendWeight0.x * (vec4(localNormalNormalized, 0.0f) * boneMatrix1)));
	worldNormal = (worldNormal + (inBlendWeight0.y * (vec4(localNormalNormalized, 0.0f) * boneMatrix2)));
	worldNormal = (worldNormal + (inBlendWeight0.z * (vec4(localNormalNormalized, 0.0f) * boneMatrix3)));
	worldNormal = (worldNormal + (inBlendWeight0.w * (vec4(localNormalNormalized, 0.0f) * boneMatrix4)));
	worldNormal = (WorldMatrix * vec4(worldNormal, 0.0f)).xyz;

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord1 = worldNormalNormalized;

	//Object World Position
	vec3 objectWorldPosition = vec3(WorldMatrix[3].x, WorldMatrix[3].y, WorldMatrix[3].z);

	//Pass object world position to pixel shader
	TexCoord2 = objectWorldPosition;

	TexCoord3 = inTexCoord0;
	vec3 LocalBinormal = LocalTangentFrame[1];

	//Normalize Local Binormal
	vec3 localBinormalNormalized = normalize(LocalBinormal);

	//World space Binormal
	vec3 worldBinormal = vec3(0.0f, 0.0f, 0.0f);
	worldBinormal = (worldBinormal + (inBlendWeight0.x * (vec4(localBinormalNormalized, 0.0f) * boneMatrix1)));
	worldBinormal = (worldBinormal + (inBlendWeight0.y * (vec4(localBinormalNormalized, 0.0f) * boneMatrix2)));
	worldBinormal = (worldBinormal + (inBlendWeight0.z * (vec4(localBinormalNormalized, 0.0f) * boneMatrix3)));
	worldBinormal = (worldBinormal + (inBlendWeight0.w * (vec4(localBinormalNormalized, 0.0f) * boneMatrix4)));
	worldBinormal = (WorldMatrix * vec4(worldBinormal, 0.0f)).xyz;

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(worldBinormal);

	WorldBinormal = worldBinormalNormalized;

	vec3 LocalTangent = LocalTangentFrame[0];

	//Normalize Local Tangent
	vec3 localTangentNormalized = normalize(LocalTangent);

	//World space Tangent
	vec3 worldTangent = vec3(0.0f, 0.0f, 0.0f);
	worldTangent = (worldTangent + (inBlendWeight0.x * (vec4(localTangentNormalized, 0.0f) * boneMatrix1)));
	worldTangent = (worldTangent + (inBlendWeight0.y * (vec4(localTangentNormalized, 0.0f) * boneMatrix2)));
	worldTangent = (worldTangent + (inBlendWeight0.z * (vec4(localTangentNormalized, 0.0f) * boneMatrix3)));
	worldTangent = (worldTangent + (inBlendWeight0.w * (vec4(localTangentNormalized, 0.0f) * boneMatrix4)));
	worldTangent = (WorldMatrix * vec4(worldTangent, 0.0f)).xyz;

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(worldTangent);

	WorldTangent = worldTangentNormalized;

	//World space view vector
	vec3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	WorldView = worldView;

	//Calculate Height Fog
	float depthValue = clamp(((global_FogPropertyMatrix[3].y - length(worldView)) / (global_FogPropertyMatrix[3].y - global_FogPropertyMatrix[3].x)), 0, 1);
	float heightDensity = ((worldPosition.y - global_FogPropertyMatrix[2].z) / global_FogPropertyMatrix[3].z);
	float heightFog = clamp(max(depthValue, heightDensity), 0, 1);

	HeightFog = heightFog;

	//Calculate Distance Fog
	float distanceFog = clamp(((global_FogPropertyMatrix[2].y - length(worldView)) / (global_FogPropertyMatrix[2].y - global_FogPropertyMatrix[2].x)), 0, 1);

	DistanceFog = distanceFog;

	//Pass Local Normal to PS
	LocalNormal = localNormalNormalized;

	//View space position
	vec4 viewPosition = (global_View * worldPosition);

	//Depth
	float depth = viewPosition.z;

	//Normalized Depth
	float depthNormalized = (depth / global_ViewInfo.x);

	//Pass normalized depth to pixel shader
	DepthNormalized = depthNormalized;

	gl_Position = Position0;
}


[Fragment shader]

#version 450
#extension GL_NV_gpu_shader5 : enable
#include "Shaders/NX/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_PS_NX.shdh"
#include "Shaders/NX/PBR.shdh"
#include "Shaders/NX/Exposure.shdh"
#include "Shaders/NX/ImageBasedLightingHelpers.shdh"

layout(location = 1) in vec4 Position0;
layout(location = 2) in vec4 TexCoord0;
layout(location = 3) in vec3 TexCoord1;
layout(location = 4) in vec3 TexCoord2;
layout(location = 5) in vec2 TexCoord3;
layout(location = 6) in vec3 WorldBinormal;
layout(location = 7) in vec3 WorldTangent;
layout(location = 8) in vec3 WorldView;
layout(location = 9) in float HeightFog;
layout(location = 10) in float DistanceFog;
layout(location = 11) in vec3 LocalNormal;
layout(location = 12) in float DepthNormalized;

layout(location = 0) out vec4 outColor0;

layout(binding = 0) uniform sampler2D Texture2DParameter_6cacb6396fe94aef83ac4f17e82f5b83_DefaultWrapSampler;
layout(binding = 1) uniform sampler2D Texture2DParameter_aa6a0d9586aa46d38f31ebadaffef4d1_DefaultWrapSampler;
layout(binding = 2) uniform sampler2D Texture2DParameter_NM_DefaultWrapSampler;
layout(binding = 3) uniform sampler2D Texture2DParameter_BMA_DefaultWrapSampler;
layout(binding = 4) uniform sampler2D Texture2DParameter_PM_DefaultWrapSampler;
layout(binding = 5) uniform sampler2D _sceneDepth;
layout(binding = 6) uniform sampler2D _scene;
layout(binding = 0, std140) uniform PGlobals
{
	float FloatParameter_GlowRadius;
	vec3 Vector3Parameter_DistanceGlowColor;
	float FloatParameter_DistanceGlowStrength;
	float _OpacityFade;
	vec3 Vector3Parameter_ShadowColor;
	vec3 Vector3Parameter_BaseColor;
	vec3 Vector3Parameter_HighlightColor;
	float FloatParameter_CrystalBrightness;
	float FloatParameter_GlowStrength;
};

void CalculateMatOpacity(vec4 in_0,
	vec3 in_1,
	vec3 in_2,
	vec3 in_3,
	vec2 in_4,
	vec3 in_5,
	out float out_0)
{
	//Custom Material Lighting
	float Local0 = (1.0f / FloatParameter_GlowRadius);
	vec3 Local2 = (global_PlayerPosition0.xyz - in_0.xyz);
	float Local3 = length(Local2);
	float Local1 = ((clamp((1.0f - (Local3 * Local0)), 0, 1) * abs(dot(in_1, (Local2 * (1.0f / (Local3 + 1E-23f)))))) * global_PlayerPosition0.w);
	vec3 Local5 = (global_PlayerPosition1.xyz - in_0.xyz);
	float Local6 = length(Local5);
	float Local4 = ((clamp((1.0f - (Local6 * Local0)), 0, 1) * abs(dot(in_1, (Local5 * (1.0f / (Local6 + 1E-23f)))))) * global_PlayerPosition1.w);
	vec3 Local8 = (global_PlayerPosition2.xyz - in_0.xyz);
	float Local9 = length(Local8);
	float Local7 = ((clamp((1.0f - (Local9 * Local0)), 0, 1) * abs(dot(in_1, (Local8 * (1.0f / (Local9 + 1E-23f)))))) * global_PlayerPosition2.w);
	vec3 Local11 = (global_PlayerPosition3.xyz - in_0.xyz);
	float Local12 = length(Local11);
	float Local10 = ((clamp((1.0f - (Local12 * Local0)), 0, 1) * abs(dot(in_1, (Local11 * (1.0f / (Local12 + 1E-23f)))))) * global_PlayerPosition3.w);
	float Local13 = max(max(max(Local1, Local4), Local7), Local10);
	vec3 Local14 = (in_2 - in_3);
	vec2 Local15 = Local14.xy;
	vec2 Local16 = Local14.zy;
	float Local17 = in_1.z;
	float Local18 = abs(Local17);
	float Local19 = in_1.x;
	float Local20 = abs(Local19);
	float Local21 = step(Local18, Local20);
	vec2 Local22 = mix(Local15, Local16, vec2(Local21, Local21));
	vec2 Local23 = Local14.xz;
	float Local24 = mix(Local18, Local20, Local21);
	float Local25 = in_1.y;
	float Local26 = abs(Local25);
	float Local27 = step(Local24, Local26);
	vec2 Local28 = mix(Local22, Local23, vec2(Local27, Local27));
	vec2 Local29 = (2.0f * Local28);
	float Local30 = (global_Data.x * 4.0f);
	vec4 Local31 = texture(Texture2DParameter_6cacb6396fe94aef83ac4f17e82f5b83_DefaultWrapSampler, (Local28 + (vec2(0.1f, 0.1f) * global_Data.x)));
	//[Local31] Get needed components
	vec3 Local32 = Local31.xyz;
	vec3 Local33 = (Local32 * 2.0f);
	float Local34 = Local33.x;
	vec2 Local35 = ((Local29 + (vec2(0.0f, 0.175f) * Local30)) + vec2(Local34));
	vec4 Local36 = texture(Texture2DParameter_aa6a0d9586aa46d38f31ebadaffef4d1_DefaultWrapSampler, Local35);
	//[Local36] Get needed components
	float Local37 = Local36.x;
	float Local38 = Local33.z;
	vec2 Local39 = ((Local29 + (vec2(0.0f, -0.15f) * Local30)) + vec2(Local38));
	vec4 Local40 = texture(Texture2DParameter_aa6a0d9586aa46d38f31ebadaffef4d1_DefaultWrapSampler, Local39);
	//[Local40] Get needed components
	float Local41 = Local40.x;
	float Local42 = (Local37 + Local41);
	float Local43 = pow(Local42, 3.0f);
	vec3 Local44 = (Vector3Parameter_DistanceGlowColor * Local43);
	vec3 Local45 = (Local13 * Local44);
	vec3 Local46 = (Local45 * FloatParameter_DistanceGlowStrength);
	vec4 Local47 = texture(Texture2DParameter_NM_DefaultWrapSampler, in_4);
	//[Local47] Convert normalmaps to tangent space vectors
	Local47.xyzw = Local47.wzyx;
	Local47.xyz = ((Local47.xyz * 2.0f) - vec3(1.0f));
	Local47.z = -(Local47.z);
	Local47.xyz = normalize(Local47.xyz);
	//[Local47] Get needed components
	vec3 Local48 = Local47.xyz;
	float Local49 = pow((1.0f - clamp(dot(Local48, in_5), 0, 1)), 1.0f);
	vec3 Local50 = (Local46 + vec3(Local49));
	vec3 Local51 = clamp(Local50, 0.75f, 1.0f);
	out_0 = Local51.x;
}

void CalculateMatEmissiveColor(vec2 in_0,
	vec3 in_1,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_BMA_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.y;
	vec4 Local2 = texture(Texture2DParameter_NM_DefaultWrapSampler, in_0);
	//[Local2] Convert normalmaps to tangent space vectors
	Local2.xyzw = Local2.wzyx;
	Local2.xyz = ((Local2.xyz * 2.0f) - vec3(1.0f));
	Local2.z = -(Local2.z);
	Local2.xyz = normalize(Local2.xyz);
	//[Local2] Get needed components
	vec3 Local3 = Local2.xyz;
	float Local4 = pow((1.0f - clamp(dot(Local3, in_1), 0, 1)), 2.0f);
	float Local5 = (Local1 + Local4);
	float Local6 = pow((1.0f - clamp(dot(Local3, in_1), 0, 1)), 0.15f);
	float Local7 = (1.0f - Local6);
	float Local8 = (Local5 + Local7);
	float Local9 = pow(Local8, 4.5f);
	//Color Gradient (Procedural)
	float Local10 = smoothstep(0.0f, 0.5f, Local9);
	float Local11 = smoothstep(0.5f, 1.0f, Local9);
	vec3 Local12 = mix(mix(Vector3Parameter_ShadowColor, Vector3Parameter_BaseColor, vec3(Local10, Local10, Local10)), Vector3Parameter_HighlightColor, vec3(Local11, Local11, Local11));
	vec3 Local13 = (Local12 * FloatParameter_CrystalBrightness);
	vec3 Local14 = (Vector3Parameter_DistanceGlowColor + Vector3Parameter_DistanceGlowColor);
	vec3 Local15 = (Local13 * Local14);
	vec3 Local16 = (Local13 * Local15);
	vec3 Local17 = (Local16 * FloatParameter_GlowStrength);
	out_0 = Local17;
}

void CalculateMatNormal(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_NM_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - vec3(1.0f));
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatBaseColor(vec4 in_0,
	vec3 in_1,
	vec3 in_2,
	vec3 in_3,
	vec2 in_4,
	vec3 in_5,
	out vec3 out_0)
{
	//Custom Material Lighting
	float Local0 = (1.0f / FloatParameter_GlowRadius);
	vec3 Local2 = (global_PlayerPosition0.xyz - in_0.xyz);
	float Local3 = length(Local2);
	float Local1 = ((clamp((1.0f - (Local3 * Local0)), 0, 1) * abs(dot(in_1, (Local2 * (1.0f / (Local3 + 1E-23f)))))) * global_PlayerPosition0.w);
	vec3 Local5 = (global_PlayerPosition1.xyz - in_0.xyz);
	float Local6 = length(Local5);
	float Local4 = ((clamp((1.0f - (Local6 * Local0)), 0, 1) * abs(dot(in_1, (Local5 * (1.0f / (Local6 + 1E-23f)))))) * global_PlayerPosition1.w);
	vec3 Local8 = (global_PlayerPosition2.xyz - in_0.xyz);
	float Local9 = length(Local8);
	float Local7 = ((clamp((1.0f - (Local9 * Local0)), 0, 1) * abs(dot(in_1, (Local8 * (1.0f / (Local9 + 1E-23f)))))) * global_PlayerPosition2.w);
	vec3 Local11 = (global_PlayerPosition3.xyz - in_0.xyz);
	float Local12 = length(Local11);
	float Local10 = ((clamp((1.0f - (Local12 * Local0)), 0, 1) * abs(dot(in_1, (Local11 * (1.0f / (Local12 + 1E-23f)))))) * global_PlayerPosition3.w);
	float Local13 = max(max(max(Local1, Local4), Local7), Local10);
	vec3 Local14 = (in_2 - in_3);
	vec2 Local15 = Local14.xy;
	vec2 Local16 = Local14.zy;
	float Local17 = in_1.z;
	float Local18 = abs(Local17);
	float Local19 = in_1.x;
	float Local20 = abs(Local19);
	float Local21 = step(Local18, Local20);
	vec2 Local22 = mix(Local15, Local16, vec2(Local21, Local21));
	vec2 Local23 = Local14.xz;
	float Local24 = mix(Local18, Local20, Local21);
	float Local25 = in_1.y;
	float Local26 = abs(Local25);
	float Local27 = step(Local24, Local26);
	vec2 Local28 = mix(Local22, Local23, vec2(Local27, Local27));
	vec2 Local29 = (2.0f * Local28);
	float Local30 = (global_Data.x * 4.0f);
	vec4 Local31 = texture(Texture2DParameter_6cacb6396fe94aef83ac4f17e82f5b83_DefaultWrapSampler, (Local28 + (vec2(0.1f, 0.1f) * global_Data.x)));
	//[Local31] Get needed components
	vec3 Local32 = Local31.xyz;
	vec3 Local33 = (Local32 * 2.0f);
	float Local34 = Local33.x;
	vec2 Local35 = ((Local29 + (vec2(0.0f, 0.175f) * Local30)) + vec2(Local34));
	vec4 Local36 = texture(Texture2DParameter_aa6a0d9586aa46d38f31ebadaffef4d1_DefaultWrapSampler, Local35);
	//[Local36] Get needed components
	float Local37 = Local36.x;
	float Local38 = Local33.z;
	vec2 Local39 = ((Local29 + (vec2(0.0f, -0.15f) * Local30)) + vec2(Local38));
	vec4 Local40 = texture(Texture2DParameter_aa6a0d9586aa46d38f31ebadaffef4d1_DefaultWrapSampler, Local39);
	//[Local40] Get needed components
	float Local41 = Local40.x;
	float Local42 = (Local37 + Local41);
	float Local43 = pow(Local42, 3.0f);
	vec3 Local44 = (Vector3Parameter_DistanceGlowColor * Local43);
	vec3 Local45 = (Local13 * Local44);
	vec3 Local46 = (Local45 * FloatParameter_DistanceGlowStrength);
	vec4 Local47 = texture(Texture2DParameter_BMA_DefaultWrapSampler, in_4);
	//[Local47] Get needed components
	float Local48 = Local47.y;
	vec4 Local49 = texture(Texture2DParameter_NM_DefaultWrapSampler, in_4);
	//[Local49] Convert normalmaps to tangent space vectors
	Local49.xyzw = Local49.wzyx;
	Local49.xyz = ((Local49.xyz * 2.0f) - vec3(1.0f));
	Local49.z = -(Local49.z);
	Local49.xyz = normalize(Local49.xyz);
	//[Local49] Get needed components
	vec3 Local50 = Local49.xyz;
	float Local51 = pow((1.0f - clamp(dot(Local50, in_5), 0, 1)), 2.0f);
	float Local52 = (Local48 + Local51);
	float Local53 = pow((1.0f - clamp(dot(Local50, in_5), 0, 1)), 0.15f);
	float Local54 = (1.0f - Local53);
	float Local55 = (Local52 + Local54);
	float Local56 = pow(Local55, 4.5f);
	//Color Gradient (Procedural)
	float Local57 = smoothstep(0.0f, 0.5f, Local56);
	float Local58 = smoothstep(0.5f, 1.0f, Local56);
	vec3 Local59 = mix(mix(Vector3Parameter_ShadowColor, Vector3Parameter_BaseColor, vec3(Local57, Local57, Local57)), Vector3Parameter_HighlightColor, vec3(Local58, Local58, Local58));
	vec3 Local60 = (Local59 * FloatParameter_CrystalBrightness);
	vec3 Local61 = (Local46 + Local60);
	out_0 = Local61;
}

void CalculateMatMetalMask(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_PM_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local1;
}

void CalculateMatReflectance(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_PM_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local1;
}

void CalculateMatRoughness(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_PM_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local2;
}

void CalculateMatRefraction(vec3 in_0,
	out vec2 out_0)
{
	vec3 Local0 = (vec3(0.05f, 0.05f, 0.05f) * in_0);
	out_0 = Local0.xy;
}

void main()
{
	float matOpacity;
	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(TexCoord1);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(WorldBinormal);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(WorldTangent);

	mat3x3 NBT = mat3x3(vec3(worldTangentNormalized.x, worldNormalNormalized.x, worldBinormalNormalized.x), vec3(worldTangentNormalized.y, worldNormalNormalized.y, worldBinormalNormalized.y), vec3(worldTangentNormalized.z, worldNormalNormalized.z, worldBinormalNormalized.z));

	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(WorldView);

	//Calculate tangent space view vector
	vec3 tangentView = (NBT * worldViewNormalized);

	CalculateMatOpacity(TexCoord0, worldNormalNormalized, TexCoord0.xyz, TexCoord2, TexCoord3, tangentView, matOpacity);
	matOpacity = (matOpacity * _OpacityFade);

	vec3 matEmissiveColor;
	CalculateMatEmissiveColor(TexCoord3, tangentView, matEmissiveColor);
	vec3 matNormal;
	CalculateMatNormal(TexCoord3, matNormal);
	matNormal = normalize((matNormal * NBT));

	vec3 matBaseColor;
	CalculateMatBaseColor(TexCoord0, worldNormalNormalized, TexCoord0.xyz, TexCoord2, TexCoord3, tangentView, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(TexCoord3, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(TexCoord3, matReflectance);
	matReflectance = RemapReflectance(matReflectance);
	float matRoughness;
	CalculateMatRoughness(TexCoord3, matRoughness);
	matRoughness = max(0.09f, matRoughness);
	vec3 FinalColor = vec3(0.0f, 0.0f, 0.0f);

	//Calculate Image Based Lighting
	vec3 iblDiffuse;
	vec3 iblSpecular;
	EvaluateDistantIBL(matBaseColor, matRoughness, vec3(matReflectance, matReflectance, matReflectance), matMetalMask, matNormal, worldViewNormalized, iblDiffuse, iblSpecular);
	FinalColor = ((FinalColor + iblDiffuse) + iblSpecular);

	vec3 LightDiffuseColorOut;
	vec3 LightSpecularColorOut;
	DirectionLight(matNormal, worldViewNormalized, global_LightPropertyMatrix, matBaseColor, matReflectance, matRoughness, matMetalMask, LightDiffuseColorOut, LightSpecularColorOut);
	FinalColor = ((FinalColor + LightDiffuseColorOut) + LightSpecularColorOut);

	FinalColor = PreExpose(FinalColor);

	FinalColor = (FinalColor + (matEmissiveColor * vec3(!bool(global_Data.y))));

	FinalColor = mix(global_FogPropertyMatrix[1], FinalColor, vec3(HeightFog, HeightFog, HeightFog));
	FinalColor = mix(global_FogPropertyMatrix[0], FinalColor, vec3(DistanceFog, DistanceFog, DistanceFog));

	vec2 matRefraction;
	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(LocalNormal);

	CalculateMatRefraction(localNormalNormalized, matRefraction);
	//Y direction of svMatRefraction is negated because V component of UV is in other direction.
	matRefraction.y = -(matRefraction.y);
	//UV position
	vec2 Local0 = (gl_FragCoord.xy / global_ViewInfo.zw);

	float Local1 = texture(_sceneDepth, (Local0 + matRefraction)).x;
	vec2 Local2 = (Local0 + ((matRefraction * step(DepthNormalized, Local1)) * _OpacityFade));
	vec4 Local3 = texture(_scene, Local2);
	FinalColor = mix(Local3.xyz, FinalColor, vec3(matOpacity, matOpacity, matOpacity));
	matOpacity = (matOpacity + ((1.0f - matOpacity) * Local3.w));

	outColor0 = vec4(FinalColor, matOpacity);
	outColor0 = max(outColor0, 0.0f);
}
