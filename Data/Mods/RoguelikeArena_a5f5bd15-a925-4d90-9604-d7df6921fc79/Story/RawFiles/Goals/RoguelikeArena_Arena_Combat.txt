Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION
// Enables arena mode for characters entering an arena.
IF
CharacterEnteredTrigger(_Character, _Trigger)
AND
DB_RoguelikeArena_ArenaEventTriggers(_, _Trigger)
THEN
SetInArena(_Character, 1);

// Disables arena mode for characters exiting an arena.
IF
CharacterLeftTrigger(_Character, _Trigger)
AND
CharacterIsDead(_Character, 0)
AND
CharacterIsPolymorphInteractionDisabled(_Character, 0)
AND
DB_RoguelikeArena_ArenaEventTriggers(_Arena, _Trigger)
THEN
SetInArena(_Character, 0);

// Tries to end combat if an enemy dies.
IF
CharacterDied(_Character)
AND
GetFaction(_Character, "Evil NPC")
AND
DB_RoguelikeArena_ActiveArena(_Arena, _Level, _Difficulty, _Players)
AND
QRY_RoguelikeArena_ObjectIsInArena(_Character, _Arena)
AND
DB_CombatCharacters(_Character, _CombatID)
AND
QRY_RoguelikeArena_ShouldEndArenaCombat(_Arena, _CombatID)
THEN
EndCombat(_CombatID);
PROC_RoguelikeArena_ArenaCombatEnded(_Arena, _Level, _Difficulty, _Players);

// Tries to end combat if an enemy goes off stage.
IF
CharacterWentOnStage(_Character, _Bool)
AND
GetFaction(_Character, "Evil NPC")
AND
_Bool == 0
AND
DB_RoguelikeArena_ActiveArena(_Arena, _Level, _Difficulty, _Players)
AND
QRY_RoguelikeArena_ObjectIsInArena(_Character, _Arena)
AND
DB_CombatCharacters(_Character, _CombatID)
AND
QRY_RoguelikeArena_ShouldEndArenaCombat(_Arena, _CombatID)
THEN
EndCombat(_CombatID);
PROC_RoguelikeArena_ArenaCombatEnded(_Arena, _Level, _Difficulty, _Players);

// Tries to end combat if an enemy leaves an arena.
IF
CharacterLeftTrigger(_Character, _Trigger)
AND
GetFaction(_Character, "Evil NPC")
AND
DB_RoguelikeArena_ActiveArena(_Arena, _Level, _Difficulty, _Players)
AND
DB_RoguelikeArena_ArenaEventTriggers(_Arena, _Trigger)
AND
DB_CombatCharacters(_Character, _CombatID)
AND
QRY_RoguelikeArena_ShouldEndArenaCombat(_Arena, _CombatID)
THEN
EndCombat(_CombatID);
PROC_RoguelikeArena_ArenaCombatEnded(_Arena, _Level, _Difficulty, _Players);

// Tries to end combat if an enemy exits combat.
IF
ObjectLeftCombat(_Character, _CombatID)
AND
GetFaction(_Character, "Evil NPC")
AND
DB_RoguelikeArena_ActiveArena(_Arena, _Level, _Difficulty, _Players)
AND
QRY_RoguelikeArena_ObjectIsInArena(_Character, _Arena)
AND
QRY_RoguelikeArena_ShouldEndArenaCombat(_Arena, _CombatID)
THEN
EndCombat(_CombatID);
PROC_RoguelikeArena_ArenaCombatEnded(_Arena, _Level, _Difficulty, _Players);

PROC
PROC_RoguelikeArena_ArenaCombatEnded((INTEGER)_Arena, (INTEGER)_Level, (INTEGER)_Difficulty, (INTEGER)_Players)
AND
DB_RoguelikeArena_ArenaEventTriggers(_Arena, _Trigger)
AND
DB_InRegion(_Character, _Trigger)
THEN
SetInArena(_Character, 0);
PROC_RoguelikeArena_CharacterFullRestore(_Character);

PROC
PROC_RoguelikeArena_ArenaCombatEnded(_Arena, _, _, _)
AND
DB_RoguelikeArena_ArenaEventTriggers(_Arena, _Trigger)
AND
DB_InRegion(_Character, _Trigger)
AND
IsTagged(_Character, "AI_IGNORED_TARGET", 1)
THEN
SetOnStage(_Character, 0);

QRY
QRY_RoguelikeArena_AnyEnemiesInCombat((INTEGER)_CombatID)
AND
DB_CombatCharacters(_Character, _CombatID)
AND
GetFaction(_Character, "Evil NPC")
AND
CharacterIsDead(_Character, 0)
THEN
DB_NOOP(1);

QRY
QRY_RoguelikeArena_ShouldEndArenaCombat((INTEGER)_Arena, (INTEGER)_CombatID)
AND
DB_CombatCharacters(_Character, _CombatID)
AND
QRY_RoguelikeArena_ObjectIsInArena(_Character, _Arena)
AND
NOT QRY_RoguelikeArena_AnyEnemiesInCombat(_CombatID)
AND
IsCombatActive(_CombatID, 1)
THEN
DB_NOOP(1);
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "RoguelikeArena_Arena"
